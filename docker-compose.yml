version: '3.4'

services:
  db:
    container_name: db
    image: postgres
    # Removed ports for external access
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: guru_api
      POSTGRES_PASSWORD:
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U guru_api -d guru_api_production || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - internal_network

  weaviate:
    container_name: weaviate
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8080'
      - --scheme
      - http
    image: semitechnologies/weaviate:1.22.4
    # Removed ports for external access
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: on-failure:0
    env_file:
      - .env.weaviate
    networks:
      - internal_network

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    # Removed ports for external access
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 20
    networks:
      - internal_network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    # Removed ports for external access
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 10s
      retries: 20
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    links:
      - zookeeper:zookeeper
    networks:
      - internal_network

  discord_bot:
    build:
      context: .
      dockerfile: ./Dockerfile
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      guru_api:
        condition: service_healthy
      weaviate:
        condition: service_started
    links:
      - guru_api:guru_api
    env_file:
      - .env.discord_bot
    command: python3 run_discord_bot.py
    networks:
      - internal_network

  guru_api:
    container_name: guru_api
    build:
      context: ./guru_api
      dockerfile: Dockerfile
      args:
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
        - AGENT_API=http://agent_api:8000
    env_file:
      - .env
    volumes:
      - guru_api_storage:/rails/storage/
    # Removed ports for external access
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
      interval: 10s
      timeout: 30s
      retries: 20
      start_period: 5s
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      weaviate:
        condition: service_started
    links:
      - db:db
      - weaviate:weaviate
    networks:
      - internal_network

  karafka:
    container_name: karafka
    build:
      context: ./guru_api
      dockerfile: Dockerfile
      args:
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
        - AGENT_API=http://agent_api:8000
    command: ["./bin/karafka", "server"]
    env_file:
      - .env
    volumes:
      - guru_api_storage:/rails/storage/
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      weaviate:
        condition: service_started
    links:
      - db:db
      - weaviate:weaviate
    networks:
      - internal_network

  karafka_web:
    container_name: karafka_web
    build:
      context: ./guru_api
      dockerfile: Dockerfile
      args:
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
        - AGENT_API=http://agent_api:8000
    command: bash -c "bundle exec karafka-web install && bundle exec rackup -o 0.0.0.0 karafka_web.ru"
    env_file:
      - .env
      - .env.karafka_web
    volumes:
      - guru_api_storage:/rails/storage/
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      guru_api:
        condition: service_healthy
    links:
      - db:db
    ports:
      - 9292:9292
    networks:
      - internal_network

volumes:
  guru_api_storage:
  weaviate_data:
  db:

networks:
  internal_network:
    driver: bridge
