version: '2.23'

services:
  db:
    container_name: db
    image: postgres
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: guru_api
      POSTGRES_PASSWORD:
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U guru_api -d guru_api_production || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Enable automatic topic creation
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    links:
      - zookeeper:zookeeper

  # Client for the Guru API
  python_guru_kafka_consumer:
    build:
      context: .
      dockerfile: ./Dockerfile
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      guru_api:
        condition: service_healthy
    links:
      - guru_api:guru_api
    env_file:
      - .env_discord_bot
    volumes:
      - .:/app
    command: python3 ./guru/api/kafka/consumer.py

  # Client for the Guru API
  discord_bot:
    build:
      context: .
      dockerfile: ./Dockerfile
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      guru_api:
        condition: service_healthy
    links:
      - guru_api:guru_api
    env_file:
      - .env_discord_bot
    volumes:
      - .:/app
    command: python3 run_discord_bot.py

  # This runs as it's in Production. Modify with caution.
  # primary api backend
  guru_api:
    container_name: guru_api
    build:
      context: ./guru_api
      dockerfile: Dockerfile
      args:
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
        - AGENT_API=http://agent_api:8000
    env_file:
      - .env
    volumes:
      - ./guru_api:/rails
      - guru_api_storage:/rails/storage/
    ports:
      - 3000:3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    links:
      - db:db

  karafka:
    container_name: karafka
    build:
      context: ./guru_api
      dockerfile: Dockerfile
      args:
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
        - AGENT_API=http://agent_api:8000
    command: ["./bin/karafka", "server"]
    env_file:
      - .env
    volumes:
      - ./guru_api:/rails
      - guru_api_storage:/rails/storage/
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    links:
      - db:db

  karafka_web:
    container_name: karafka_web
    build:
      context: ./guru_api
      dockerfile: Dockerfile
      args:
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
        - AGENT_API=http://agent_api:8000
    command: bash -c "bundle exec karafka-web install && bundle exec rackup -o 0.0.0.0 karafka_web.ru"
    env_file:
      - .env
      - .env_karafka_web
    volumes:
      - ./guru_api:/rails
      - guru_api_storage:/rails/storage/
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      guru_api: # never interacts but requires it to be up and complete topic creation before us.
        condition: service_healthy
    links:
      - db:db
    ports:
      - 9292:9292

volumes:
  guru_api_storage:
  db: